import pygame
from pygame.locals import *
import time
import sys
import random


pygame.init()

vec = pygame.math.Vector2  # 2 for two dimensional
HEIGHT = 450
WIDTH = 400
ACC = 0.5
FRIC = -0.12
FPS = 60

FramePerSec = pygame.time.Clock()

displaysurface = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("FlappyBird")





class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__() 
        self.surf = pygame.Surface((30, 30))
        self.surf.fill((55,220,204))
        self.rect = self.surf.get_rect()

        self.pos = vec(10, 300)
        self.vel = vec(0,5)
        self.acc = vec(0,5)
        self.score = 0 # Shows the score 
    
    
    def move(self):
        self.acc = vec(0,0.5)

        pressed_keys = pygame.key.get_pressed()   
        if pressed_keys[K_LEFT]:
            self.acc.x = -ACC
        if pressed_keys[K_RIGHT]:
            self.acc.x = ACC

        self.acc.x += self.vel.x * FRIC
        self.vel += self.acc
        self.pos += self.vel + 0.5 * self.acc  

        
        
        self.rect.midbottom = self.pos 


    def jump(self):
        hits = pygame.sprite.spritecollide(self, platforms, False)
        if hits:
            self.vel.y = -15
            


    def update(self):
        hits = pygame.sprite.spritecollide(self ,platforms, False)
        if self.vel.y > 0:        
            if hits:
                if self.pos.y < hits[0].rect.bottom:
                    self.score += 1                  
                    self.pos.y = hits[0].rect.top +1
                    self.vel.y = 0
                    self.jumping = False


class platform(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.surf = pygame.Surface((random.randint(50,100), 12))
        self.surf.fill((0,255,0))
        self.rect = self.surf.get_rect(center = (random.randint(0,WIDTH-10),(random.randint(0, HEIGHT-30))))

        self.moving = True
        self.point = True


    def move(self):
        pass



def plat_gen():
    while len(platforms) < 10 :
        width = random.randrange(50,100)
        p  = platform()             
        p.rect.center = (random.randrange(0, WIDTH - width),(random.randrange(-50, 0)))
        platforms.add(p)
        all_sprites.add(p)




def check(platform, groupies):
    if pygame.sprite.spritecollideany(platform,groupies):
        return True
    else:
        for entity in groupies:
            if entity == platform:
                continue
            if (abs(platform.rect.top - entity.rect.bottom) < 50) and (abs(platform.rect.bottom - entity.rect.top) < 50):
                return True
        C = False

        
PT1 = platform()
P1 = Player()

PT1.surf = pygame.Surface((WIDTH, 20))
PT1.surf.fill((255,255,255))
PT1.rect = PT1.surf.get_rect(center = (WIDTH/2, HEIGHT- 10))


all_sprites = pygame.sprite.Group()
all_sprites.add(PT1)
all_sprites.add(P1)

platforms = pygame.sprite.Group()
platforms.add(PT1)
PT1.moving = False
PT1.point = False


for x  in range(random.randint(8, 9)):
    pl = platform()
    platforms.add(pl)
    all_sprites.add(pl)


while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()

        if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    P1.jump()    
        
    if P1.rect.top >= WIDTH:
        P1.pos.x += (P1.vel.x)
        for plat in platforms:
            plat.rect.x += (P1.vel.x)
            if plat.rect.top <= WIDTH:
                plat.kill()


    if P1.rect.top > HEIGHT:
        for entity in all_sprites:
            entity.kill()
            time.sleep(1)
            displaysurface.fill((255,255,255))
            pygame.display.update()
            time.sleep(2)
            pygame.quit()
            sys.exit()

    displaysurface.fill((0,0,0))
    f = pygame.font.SysFont("Verdana", 20)     ##
    g  = f.render(str(P1.score), True, (123,255,0))   ##
    displaysurface.blit(g, (WIDTH/2, 10)) 
    P1.update()
    plat_gen()

    for entity in all_sprites:
        displaysurface.blit(entity.surf, entity.rect)
        entity.move()
        

    pygame.display.update()
    FramePerSec.tick(FPS)


    
    















